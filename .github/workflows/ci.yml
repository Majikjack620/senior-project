name: CI

on:
  push:
    branches: main
  pull_request:
    branches: [main, master]
    types: [opened, reopened, labeled, synchronize]
  workflow_dispatch:
    
permissions:
  pull-requests: write
  contents: write
  issues: write
  
jobs:
    Black-Formatter:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v3
        
        - name: Black Formatter Review
          uses: datadog/action-py-black-formatter@v2.1
          id: action_black
          
        - name: Create PR if formatting errors
          if: steps.actions_black.outputs.is_formatted == 'true'
          uses: peter-evans/create-pull-request@v3
          with:
            token: ${{ secrets.GITHUB_TOKEN }}
            title: "Format Python Code with psf/black for Clearer Readability"
            commit-message: ":art: Formatting Python code with psf/black" 
            body: |
              "There appear to be some python formatting errors in ${{ github.sha }}. 
              Uses the [psf/black](https://github.com/psf/black) formatter to fix these issues."
            base: ${{ github.head_ref }}
            branch: actions/black_formatter
          
        - name: Share Changes
          if: steps.action_black.outputs.is_formatted == 'true'
          uses: reviewdog/action-suggester@v1
          with:
            tool_name: blkfmt

#   Semantic-Release:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repo
#         uses: actions/checkout@v3
        
#       - name: Semantic Release
#         uses: cycjimmy/semantic-release-action@v3
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
#   Sonar-Analysis:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repo
#         uses: actions/checkout@v3
        
#       - name: SonarCloud Analysis
#         uses: SonarSource/sonarcloud-github-action@master
#         env:
#           GITHUB_TOKEN: ${{ secrets.TOKENIZED }}
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         with:
#           args:
#             -Dsonar.projectKey=Majikjack620_senior-project
#             -Dsonar.organization=majikjack620

  # Dependabot-PR-Assigner:
  #   runs-on: ubuntu-latest
  #   if: ${{github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'}}
  #   steps:
  #     - name: Assign PR to Reviewer
  #       uses: pozil/auto-assign-issue@v1
  #       with:
  #         repo-token: ${{secrets.TOKENIZED}}
  #         assignees: Majikjack620
  #         numOfAssignee: 1
  #         allowSelfAssign: true
          
  # Dependency-Validator:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repo Data
  #       uses: actions/checkout@v3
        
  #     - name: Set up node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: "18"
          
  #     - name: Set up python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.10"
          
  #     - name: Upgrade npm and install dependencies
  #       run: |
  #         npm i -g npm@latest
  #         npm i -g npm-check-updates
  #         cd backend
  #         npm install
      
  #     - name: Check for outdatead dependencies
  #       run: |
  #         cd backend
  #         ncu --format group
  #         ncu --format group >> dependent.txt
  #         python file_read.py >> $GITHUB_STEP_SUMMARY
          
  #     - if: ${{github.event_name == 'pull_request'}}
  #       name: Summarizing outdated dependency list
  #       run: |
  #         cd backend
  #         python file_read.py >> comments.txt
  #         gh pr comment "$PR_URL" --body-file comments.txt
  #       env:
  #         PR_URL: ${{github.event.pull_request.html_url}}
  #         GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          
  #     - name: Pass/Fail Check
  #       run: |
  #         cd backend
  #         python check_pass_fail.py
